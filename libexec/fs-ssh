#!/usr/bin/env ruby
# Usage: fs ssh [<application>] [<environment>]
# Summary: Open SSH session to a given application (environment).
# Help: Open SSH session to a given application (environment).
# Uses per-project or per-user configuration stored in `.fs.yml`, for example:
#
## ~/.fs.yml
# servers:
#   library:
#     default: user@library.foo.com
#     staging: user@library-staging.foo.com
#
# Running `fs ssh library` will open SSH session `user@library.foo.com`,
# `fs ssh library staging` will open SSH session `user@library-staging.foo.com`.
#
#
# Per-project configuration:
#
## .fs.yml
# servers:
#  default: user@library.foo.com
#  staging: user@library-staging.foo.com
#
# So running `fs ssh staging` in `library` folder
# will open SSH session `user@library-staging.foo.com`.

require 'yaml'

class ServersManager
  CONFIG_FILE_NAME = '.fs.yml'.freeze

  attr_reader :servers

  def initialize
    @servers = load_servers_list
  end

  def completions
    @servers.keys.sort
  end

  def ssh_to(*args)
    server = find_server_from_args(*args)

    if server
      open_session(server)
    else
      $stderr.puts('unknown server')
    end
  end

  private

  def load_servers_list
    servers = {}

    if File.exists?(global_configuration_file)
      servers.merge!(YAML.load_file(global_configuration_file)['servers'])
    end

    if File.exists?(project_configuration_file)
      servers.merge!(YAML.load_file(project_configuration_file)['servers'])
    end

    servers
  end

  def find_server_from_args(*args)
    case args.length
    when 0 then @servers['default']
    when 1 then find_environment_or_default_server(args[0])
    else find_server_and_environment(args[0], args[1])
    end
  end

  def find_environment_or_default_server(key)
    server = @servers[key]

    server.is_a?(Hash) ? server['default'] : server
  end

  def find_server_and_environment(server, environment)
    @servers[server][environment] if @servers[server]
  end

  def open_session(to)
    puts "opening SSH session #{to}"
    exec("ssh #{to}")
  end

  def project_configuration_file
    [Dir.pwd, CONFIG_FILE_NAME].join('/')
  end

  def global_configuration_file
    [ENV['HOME'], CONFIG_FILE_NAME].join('/')
  end
end


servers_manager = ServersManager.new

# Provide fs completions
if ARGV[0] == '--complete'
  puts servers_manager.completions
else
  servers_manager.ssh_to(*ARGV)
end

